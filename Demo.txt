let notyf = new Notyf({
  duration: 2500,
  position: { x: "right", y: "top" },
  types: [
    { type: "success", background: "#16a34a", icon: false },
    { type: "error", background: "#dc2626", icon: false },
    { type: "info", background: "#2563eb", icon: false },
    { type: "alert", background: "#fbff00ff", icon: false },
  ],
});

function showConfirm(title, text, icon = "question", confirmText = "Yes") {
  return Swal.fire({
    title,
    text,
    icon,
    showCancelButton: true,
    confirmButtonColor: "#2563eb",
    cancelButtonColor: "#6b7280",
    confirmButtonText: confirmText,
  });
}

function isValidEmail(email) {
  return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(email);
}
function isValidPhone(phone) {
  return /^[0-9]{10}$/.test(phone);
}
function showError(inputId, message) {
  $("#" + inputId).addClass("border-red-500");
  $("#" + inputId + "_error").text(message);
}
function clearError(inputId) {
  $("#" + inputId).removeClass("border-red-500");
  $("#" + inputId + "_error").text("");
}

$(document).on("click","#cardCandidatesBox",function(){
  $("#navCandidates").trigger("click");
});
$(document).on("click","#cardPanelsBox",function(){
  $("#navPanels").trigger("click");
});

$(document).ready(function () {
  $("#navDashboard").click(() => {
    $("#dashboardSection").show();
    $("#userSection").hide();
    loadDashboard();
  });
  $("#navAdmins").click(() => showUserSection("ADMIN"));
  $("#navPanels").click(() => showUserSection("PANEL"));
  $("#navCandidates").click(() => showUserSection("CANDIDATE"));
  $("#logoutBtn").click(() => logoutUser());

  $("#dashboardSection").show();
  $("#userSection").hide();
  loadDashboard();
});

function showUserSection(role) {
  $("#dashboardSection").hide();
  $("#userSection").show();
  $("#userSection").html(
    `<div class='text-center text-gray-500 py-10'>Loading ${role} data...</div>`
  );
  loadUserPage(role);
}

let completionChart = null;
let avgTimeChart = null;

function loadDashboard() {
  ajaxGet(
    "adminDashboardData",
    {},
    function (res) {
      try {
        let cards = res && res.cards ? res.cards : {};
        $("#cardCandidates").text(cards.candidates ?? "--");
        $("#cardPanels").text(cards.panels ?? "--");
        $("#cardTests").text(cards.tests ?? "--");
        $("#cardCompleted").text(cards.completed ?? "--");

        if (completionChart) {
          completionChart.destroy();
          completionChart = null;
        }
        if (avgTimeChart) {
          avgTimeChart.destroy();
          avgTimeChart = null;
        }

        $("#completionChart").empty();
        $("#avgTimeChart").empty();

        let completionLabels = [
          "Java Test",
          "Python Test",
          "ReactJS Test",
          "SQL Test",
          "DevOps Test",
        ];
        let completionValues = [85, 92, 78, 88, 95];

        if (
          res.completion &&
          Array.isArray(res.completion.labels) &&
          res.completion.labels.length > 0
        ) {
          completionLabels = res.completion.labels;
          completionValues = res.completion.values || [];
        }

        var completionOptions = {
          series: [
            {
              name: "Completion %",
              data: completionValues,
            },
          ],
          chart: {
            type: "bar",
            height: 300,
            toolbar: {
              show: true,
              tools: {
                download: true,
                zoom: false,
                zoomin: false,
                zoomout: false,
                pan: false,
                reset: false,
              },
            },
          },
          plotOptions: {
            bar: {
              borderRadius: 4,
              dataLabels: {
                position: "top",
              },
            },
          },
          dataLabels: {
            enabled: true,
            formatter: function (val) {
              return val + "%";
            },
            offsetY: -20,
            style: {
              fontSize: "12px",
              colors: ["#304758"],
            },
          },
          xaxis: {
            categories: completionLabels,
            position: "bottom",
            labels: {
              rotate: -45,
              rotateAlways: true,
            },
          },
          yaxis: {
            min: 0,
            max: 100,
            labels: {
              formatter: function (val) {
                return val + "%";
              },
            },
          },
          colors: ["#3b82f6"],
          title: {
            text: "Test Completion Percentage",
            align: "center",
            style: {
              fontSize: "14px",
              fontWeight: "bold",
            },
          },
        };

        completionChart = new ApexCharts(
          document.querySelector("#completionChart"),
          completionOptions
        );
        completionChart.render();

        let avgTimeLabels = [
          "Java Test",
          "Python Test",
          "ReactJS Test",
          "SQL Test",
          "DevOps Test",
        ];
        let avgTimeValues = [45, 38, 52, 41, 35];

        if (
          res.avgTime &&
          Array.isArray(res.avgTime.labels) &&
          res.avgTime.labels.length > 0
        ) {
          avgTimeLabels = res.avgTime.labels;
          avgTimeValues = res.avgTime.values || [];
        }

        var avgTimeOptions = {
          series: [
            {
              name: "Average Time (mins)",
              data: avgTimeValues,
            },
          ],
          chart: {
            type: "line",
            height: 300,
            toolbar: {
              show: true,
              tools: {
                download: true,
                zoom: false,
                zoomin: false,
                zoomout: false,
                pan: false,
                reset: false,
              },
            },
          },
          stroke: {
            curve: "smooth",
            width: 3,
          },
          markers: {
            size: 5,
            hover: {
              size: 7,
            },
          },
          dataLabels: {
            enabled: true,
            formatter: function (val) {
              return val + " min";
            },
            style: {
              fontSize: "11px",
            },
          },
          xaxis: {
            categories: avgTimeLabels,
            labels: {
              rotate: -45,
              rotateAlways: true,
            },
          },
          yaxis: {
            min: 0,
            labels: {
              formatter: function (val) {
                return val + " min";
              },
            },
          },
          colors: ["#10b981"],
          title: {
            text: "Average Completion Time",
            align: "center",
            style: {
              fontSize: "14px",
              fontWeight: "bold",
            },
          },
          grid: {
            borderColor: "#e7e7e7",
            row: {
              colors: ["#f3f3f3", "transparent"],
              opacity: 0.5,
            },
          },
        };

        avgTimeChart = new ApexCharts(
          document.querySelector("#avgTimeChart"),
          avgTimeOptions
        );
        avgTimeChart.render();

        let recent = Array.isArray(res.recent) ? res.recent : [];
        let rows = recent
          .map(
            (r) => `
        <tr>
          <td class="px-3 py-2">${escapeHtml(r.candidate ?? "-")}</td>
          <td class="px-3 py-2">${escapeHtml(r.test ?? "-")}</td>
          <td class="px-3 py-2">${escapeHtml(r.status ?? "-")}</td>
          <td class="px-3 py-2">${escapeHtml(r.score ?? "-")}</td>
          <td class="px-3 py-2">${escapeHtml(r.timeTaken ?? "-")}</td>
        </tr>
      `
          )
          .join("");
        $("#recentBody").html(
          rows ||
            `<tr><td colspan="5" class="text-center text-gray-500">No recent submissions</td></tr>`
        );

        $("#leaderboardTable").DataTable({
          destroy: true,
          dom: 'Bfrtip',
          buttons: [
            { 
              extend: 'excelHtml5',
              title: 'Leaderboard_Report', 
              className:'bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700',
              exportOptions: { columns: ':visible' } 
            }, 
            { 
              extend: 'pdfHtml5', 
              title:'Leaderboard_Report', 
              className: 'bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700', 
              orientation: 'landscape',
              pageSize: 'A4',
              exportOptions:{ columns: ':visible' }
            }, 
            { 
              extend: 'print', 
              title: 'Leaderboard Report',
              className: 'bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700' 
            } 
          ],
          paging: true, 
          searching: true, 
          info: true, 
          responsive: true 
        });
      } catch (e) {
        console.error("Error processing dashboard response:", e);
        notyf.error("Error loading dashboard");
      }
    },
    function () {
      notyf.error("Unable to fetch dashboard data");
      $("#cardCandidates,#cardPanels,#cardTests,#cardCompleted").text("--");
      $("#recentBody").html(
        `<tr><td colspan="5" class="text-center text-gray-500">Unable to load data</td></tr>`
      );
    }
  );
}

function loadUserPage(role) {
  let title = role.charAt(0) + role.slice(1).toLowerCase() + " Management";
  let colCount = role === "PANEL" ? 6 : (role === "CANDIDATE" ? 6 : 5);

  let html = `
    <div class="flex justify-between mb-4">
      <h2 class="text-2xl font-bold">${title}</h2>
      <button id="btnAddUser" class="bg-blue-600 text-white px-4 py-2 rounded">+ Add</button>
    </div>

    <div class="overflow-x-auto bg-white rounded shadow">
      <table id="userTable" class="display min-w-full">
        <thead><tr>
          <th>Username</th>
          <th>FullName</th>
          <th>Email</th>
          <th>Phone Number</th>
          ${role == "PANEL" ? "<th>Expertise</th>" : ""}
          ${role == "CANDIDATE" ? "<th>Panel</th>" : ""}
          <th>Actions</th>
        </tr></thead>
        <tbody id="userTableBody"></tbody>
      </table>
    </div>

    ${buildUserModal(role)}
  `;
  $("#userSection").html(html);
  loadUsers(role);
  bindUserActions(role);
}

function buildUserModal(role) {
  return `
    <div id="userModal" class="hidden fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center z-50">
      <div class="bg-white w-96 p-6 rounded shadow-lg max-h-[90vh] overflow-y-auto">
        <h3 class="text-lg font-semibold mb-3">Add User</h3>
        <form id="userForm" class="space-y-3">
        <div>
          <input type="text" id="username" placeholder="Username" class="w-full border rounded p-2" required>
          <p id="username_error" class="text-red-500 text-xs mt-1"></p>
        </div>
        <div>
          <input type="text" id="fullName" placeholder="FullName" class="w-full border rounded p-2" required>
          <p id="fullName_error" class="text-red-500 text-xs mt-1"></p>
        </div>
        <div>
          <input type="email" id="email" placeholder="Email" class="w-full border rounded p-2" required>
          <p id="email_error" class="text-red-500 text-xs mt-1"></p>
        </div>
        <div>
           <input type="password" id="password" placeholder="Password" class="w-full border rounded p-2" required>
          <p id="password_error" class="text-red-500 text-xs mt-1"></p>
        </div>
        <div>
              <input type="tel" id="phone" placeholder="Phone Number" class="w-full border rounded p-2"required>
          <p id="phone_error" class="text-red-500 text-xs mt-1"></p>
        </div>
            ${
              role == "PANEL"
                ? `
              <label class="block text-sm font-medium text-gray-700">Select Expertise (multiple)</label>
              <select id="expertise" multiple class="w-full border rounded p-2 h-28 focus:ring-2 focus:ring-blue-500">
                <option value="Java">Java</option>
                <option value="Python">Python</option>
                <option value="C++">C++</option>
                <option value="ReactJS">ReactJS</option>
                <option value="Spring Boot">Spring Boot</option>
                <option value="Database (SQL)">Database (SQL)</option>
                <option value="DevOps">DevOps</option>
              </select>
              <p class="text-xs text-gray-500">Hold Ctrl to select multiple</p>
              `
                : ""
            }
          <div class="flex justify-end gap-2">
            <button type="button" id="cancelModal" class="bg-gray-300 px-4 py-2 rounded">Cancel</button>
            <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">Save</button>
          </div>
        </form>
      </div>
    </div>
  `;
}

function loadUsers(role) {
  ajaxGet("getAllUsersByRole", { role: role }, function (res) {
    if (res.status == "success" && res.users && res.users.length > 0) {
      if ($.fn.DataTable.isDataTable("#userTable")) {
        $("#userTable").DataTable().clear().destroy();
      }

      let rows = "";
      res.users.forEach((u) => {
        rows += buildTableRow(u, role);
      });
      $("#userTableBody").html(rows);

      
      $("#userTable").DataTable({
        paging: true,
        searching: true,
        info: true,
        responsive: true,
        ordering: true,
        dom: 'Bfrtip',
        buttons: [ 
          { 
            extend: 'pdfHtml5', 
            title: role + '_Users_Report', 
            className: 'bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700', 
            orientation: 'landscape',
            pageSize: 'A4',
            exportOptions:{ columns: ':visible' }
          }, 
          { 
            extend: 'print', 
            title: role + ' Users Report',
            className: 'bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700' 
          } 
        ]
      });
    } else {
      const colCount = role == "PANEL" ? 6 : (role == "CANDIDATE" ? 6 : 5);
      $("#userTableBody").html(
        `<tr><td colspan="${colCount}" class="text-center">No users found</td></tr>`
      );
    }
  });
}

function buildTableRow(user, role) {
  // Get current logged in user ID
  let currentUserId = sessionStorage.getItem("user_id") || "";
  let isOwnAccount = currentUserId == user.user_id;
  
  let html = "<tr>";
  html += "<td>" + (user.username || "-") + "</td>";
  html += "<td>" + (user.full_name || "-") + "</td>";
  html += "<td>" + (user.email || "-") + "</td>";
  html += "<td>" + (user.phone_no || "-") + "</td>";

  if (role == "PANEL") {
    html += "<td>" + (user.expertise || "-") + "</td>";
  }
  
  if (role == "CANDIDATE") {
    html += "<td>" + (user.panel_name || "Not Assigned") + "</td>";
  }

  html += `<td class="text-center space-x-1">`;
  
  if (role == "CANDIDATE") {
    html += `
      <button class="assignPanel bg-indigo-600 text-white px-2 py-1 rounded"
              data-id="${user.user_id}">
        Assign Panel
      </button>
    `;
  }

  html += `
    <button class="editUser bg-yellow-500 text-white px-2 py-1 rounded"
            data-id="${user.user_id}">
      Edit
    </button>
  `;

  if (!isOwnAccount) {
    html += `
      <button class="deleteUser bg-red-600 text-white px-2 py-1 rounded"
              data-id="${user.user_id}">
        Delete
      </button>
    `;
  } else {
    html += `
      <span class="text-gray-400 text-xs italic">Your Account</span>
    `;
  }

  html += "</td></tr>";
  return html;
}

function bindUserActions(role) {
  $("#btnAddUser").off("click");
  $("#cancelModal").off("click");
  $("#username").off("input");
  $("#userForm").off("input");
  $("#userForm").off("submit");
  $(document).off("click", "#cancelEditModal");
  $(document).off("click", ".assignPanel");
  $(document).off("click", ".editUser");
  $(document).off("click", ".deleteUser");
  $("#assignCancel").off("click");
  $("#assignSave").off("click");

  $("#btnAddUser").click(() => {
    $("#userForm")[0].reset();
    $(".border-red-500").removeClass("border-red-500");
    $("[id$='_error']").text("");
    toggleModal("userModal", true);
  });
  $("#cancelModal").click(() => toggleModal("userModal", false));

  let usernameCheckTimer = null;
  let emailCheckTime = null;

  $("#username").on("input", function () {
    clearTimeout(usernameCheckTimer);
    let username = $(this).val().trim();

    if (username.length == 0) {
      clearError("username");
      return;
    }

    if (username.length < 8) {
      showError("username", "Username must be at least 8 characters");
      return;
    }

    usernameCheckTimer = setTimeout(() => {
      ajaxGet("checkUsername", { username: username }, function (res) {
        if (res.status == "error" && res.message.includes("taken")) {
          showError("username", "Username already taken");
        } else if (res.status == "success") {
          clearError("username");
          $("#username_error").html(
            "<span class='text-green-600 text-xs'>✓ Available</span>"
          );
        } else {
          showError("username", "Error checking availability");
        }
      });
    }, 400);
  });

  $("#email").on("input", function () {
    clearTimeout(emailCheckTime);
    let email = $(this).val().trim();

    if (!email.length) {
      clearError("email");
      return;
    }
    if(!isValidEmail(email)){
      showError("email","Not a valid email");
      return;
    }

    emailCheckTime = setTimeout(() => {
      ajaxGet("checkUsername", { email: email }, function (res2) {
        if (res2.status == "exists") {
          showError("email", "Email is already registered");
        } else if (res2.status == "success") {
          clearError("email");
          $("#email_error").html(
            "<span class='text-green-600 text-xs'>Valid email</span>"
          );
        } else {
          showError("email", "Error checking availability");
        }
      });
    }, 400);
  });

  $("#userForm").on("input", "input", function () {
    let id = $(this).attr("id");
    if (id !== "username" && id !== "email") {
      validateField(id);
    }
  });

  function validateField(id) {
    let value = $("#" + id).val().trim();
    switch (id) {
      case "fullName":
        return value.length < 3
          ? showError(id, "Full name must be at least 3 characters")
          : clearError(id);
      case "email":
        return !isValidEmail(value)
          ? showError(id, "Invalid email format")
          : clearError(id);
      case "password":
        return value.length < 8
          ? showError(id, "Password must be at least 8 characters")
          : clearError(id);
      case "phone":
        return !isValidPhone(value)
          ? showError(id, "Enter valid 10-digit number")
          : clearError(id);
    }
  }

  $("#userForm").submit(function (e) {
    e.preventDefault();

    let isValid = true;
    ["username", "fullName", "email", "password", "phone"].forEach((id) => {
      validateField(id);
      let errorText = $("#" + id + "_error").text();
      if (errorText !== "" && !errorText.includes("Available") && !errorText.includes("Valid")) {
        isValid = false;
      }
    });

    if ($("#username_error").text().includes("taken")) {
      notyf.error("Username already taken, please choose a unique one");
      return;
    }
    
    if ($("#email_error").text().includes("registered")) {
      notyf.error("Please try with valid email");
      return;
    }

    if (!isValid) {
      notyf.error("Please correct highlighted errors");
      return;
    }

    let expertise = $("#expertise").val();
    ajaxPost(
      "addUser",
      {
        role,
        full_name: $("#fullName").val(),
        username: $("#username").val(),
        email: $("#email").val(),
        password: $("#password").val(),
        phone: $("#phone").val(),
        expertise: (expertise || []).join(","),
      },
      function (res) {
        if (res.status == "success") {
          notyf.success(res.message || "User added successfully");
          toggleModal("userModal", false);
          $("#userForm")[0].reset();
          loadUsers(role);
        } else {
          notyf.error(res.message || "Failed to add user");
        }
      }
    );
  });

  $(document).on("click", "#cancelEditModal", function () {
    toggleModal("editUserModal", false);
  });

  // Assign Panel
  $(document).on("click", ".assignPanel", function () {
    let candidateId = $(this).data("id");
    $("#assignCandidateId").val(candidateId);
    $("#assignPanelSelect").html("<option>Loading...</option>");
    toggleModal("assignPanelModal", true);

    ajaxGet("getAllUsersByRole", { role: "PANEL" }, function (res) {
      if (res.status == "success" && Array.isArray(res.users)) {
        let options = res.users
          .map(
            (u) =>
              `<option value="${u.user_id}">${u.full_name} (${
                u.expertise || "-"
              })</option>`
          )
          .join("");
        $("#assignPanelSelect").html(options);
      } else {
        $("#assignPanelSelect").html(
          "<option disabled>No panels available</option>"
        );
      }
    });
  });

  $("#assignCancel").click(() => toggleModal("assignPanelModal", false));

  $("#assignSave").click(() => {
    let candidateId = $("#assignCandidateId").val();
    let panelId = $("#assignPanelSelect").val();

    if (panelId == null) return notyf.error("Please select a panel member!");

    ajaxPost("assignPanel", { candidateId, panelId }, function (res) {
      if (res.status == "success") {
        notyf.success(res.message);
        toggleModal("assignPanelModal", false);
        loadUsers("CANDIDATE");
      } else {
        notyf.error(res.message);
      }
    });
  });

  let originalUserData = {};
  
  $(document).on("click", ".editUser", function () {
    let userId = $(this).data("id");

    ajaxGet("getUserById", { user_id: userId }, function (res) {
      if (res.status == "success" && res.user) {
        let user = res.user;

        originalUserData = {
          full_name: user.full_name,
          email: user.email,
          phone_no: user.phone_no,
          expertise: user.expertise || ""
        };

        $("#editUserId").val(user.user_id);
        $("#editFullName").val(user.full_name);
        $("#editEmail").val(user.email);
        $("#editPhone").val(user.phone_no);
        $("#editExpertise").val(user.expertise || "");
        $("#editStatus").prop(
          "checked",
          user.status == true || user.status == "true"
        );

        if (user.role == "PANEL") $("#editExpertiseBlock").show();
        else $("#editExpertiseBlock").hide();

        toggleModal("editUserModal", true);
      } else {
        notyf.error("Unable to fetch user details");
      }
    });
  });

  $(document).on("submit", "#editUserForm", function (e) {
    e.preventDefault();

    let userId = $("#editUserId").val();
    let fullName = $("#editFullName").val();
    let email = $("#editEmail").val();
    let phone = $("#editPhone").val();
    let expertise = $("#editExpertise").val();


    let hasChanges = (
      originalUserData.full_name !== fullName ||
      originalUserData.email !== email ||
      originalUserData.phone_no !== phone ||
      originalUserData.expertise !== expertise
    );

    if (!hasChanges) {
      notyf.error("No changes found");
      return;
    }

    ajaxPost(
      "updateUser",
      {
        user_id: userId,
        full_name: fullName,
        email: email,
        phone_no: phone,
        expertise: expertise,
      },
      function (res) {
        if (res.status == "success") {
          notyf.success(res.message || "User updated successfully");
          toggleModal("editUserModal", false);
          loadUsers(role);
        } else {
          notyf.error(res.message || "Failed to update user");
        }
      }
    );
  });

  $(document).on("click", ".deleteUser", function () {
    let userId = $(this).data("id");
    let currentUserId = userId;
    
    if (currentUserId == userId) {
      notyf.error("You cannot delete your own account!");
      return;   
    }
    
    Swal.fire({
      title: "Delete User?",
      text: "This action will deactivate the user",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#dc2626",
      cancelButtonColor: "#6b7280",
      confirmButtonText: "Yes, delete",
    }).then((result) => {
      if (result.isConfirmed) {
        ajaxPost("deleteUser", { userId: userId }, function (res) {
          if (res.status == "success") {
            notyf.success(res.message);
          } else {
            notyf.error(res.message);
          }
          loadUsers(role);
        });
      }
    });
  });
}
