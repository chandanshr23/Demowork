let notyf = new Notyf({
  duration: 2500,
  position: { x: "right", y: "top" },
  types: [
    { type: "success", background: "#16a34a", icon: false },
    { type: "error", background: "#dc2626", icon: false },
  ],
});

let currentPage = 1;
let questionsPerPage = 5;
let allQuestions = [];
let candidateAnswers = [];
let candidateAssessmentId = null;

// Store user's evaluation choices
let evaluationChoices = {};
let evaluationRemarks = {};

$(document).ready(function() {
  getUserDetails();
  
  let urlParams = new URLSearchParams(window.location.search);
  candidateAssessmentId = urlParams.get('caid');
  
  if (candidateAssessmentId==null) {
    notyf.error("No assessment ID found");
    setTimeout(function() {
      window.location.href = "panelDashboard.html";
    }, 1500);
    return;
  }
  
  loadEvaluationData();
  
  $("#backBtn, #cancelBtn").click(function() {
    window.location.href = "panelDashboard.html";
  });
  
  $("#submitEvaluation").click(function() {
    submitEvaluation();
  });
});

function loadEvaluationData() {
  ajaxPost("evaluateCandidateAssessment", { candidate_assessment_id: candidateAssessmentId }, function(res) {
    if (res.status == "success") {
      allQuestions = res.question || [];
      candidateAnswers = res.answers || [];
      
      // Initialize evaluation choices
      for (let i = 0; i < allQuestions.length; i++) {
        let q = allQuestions[i];
        let candidateAns = null;
        
        for (let j = 0; j < candidateAnswers.length; j++) {
          if (candidateAnswers[j].questionId == q.questionId) {
            candidateAns = candidateAnswers[j];
            break;
          }
        }
        
        let selected = candidateAns ? candidateAns.selectedAnswer : "";
        let isCorrect = selected.toUpperCase() == q.correctAnswer.toUpperCase();
        
        evaluationChoices[q.questionId] = isCorrect ? "correct" : "wrong";
        evaluationRemarks[q.questionId] = "";
      }
      
      $("#assessmentTitle").text(res.assessment_name || "Assessment");
      
      renderPage();
      setupPagination();
    } else {
      notyf.error(res.message || "Unable to load answers");
      setTimeout(function() {
        window.location.href = "panelDashboard.html";
      }, 1500);
    }
  });
}

function renderPage() {
  // Save current page
  saveCurrentPageChoices();
  
  let start = (currentPage - 1) * questionsPerPage;
  let end = start + questionsPerPage;
  let pageQuestions = allQuestions.slice(start, end);
  
  let html = "";
  
  for (let i = 0; i < pageQuestions.length; i++) {
    let q = pageQuestions[i];
    let actualIdx = start + i;
    let candidateAns = null;
    
    for (let j = 0; j < candidateAnswers.length; j++) {
      if (candidateAnswers[j].questionId == q.questionId) {
        candidateAns = candidateAnswers[j];
        break;
      }
    }
    
    let selected = candidateAns ? candidateAns.selectedAnswer : "Not Attempted";
    
    html += createQuestionCard(q, selected, actualIdx);
  }
  
  $("#questionsContainer").html(html);
  
  // Restore choices for this page
  restorePageChoices();
  
  // Add change listeners
  $('input[type="radio"]').on('change', function() {
    updateTotalMarks();
  });
  
  $('input[type="text"]').on('input', function() {
    let qId = $(this).data('qid');
    evaluationRemarks[qId] = $(this).val();
  });
  
  updateTotalMarks();
}

function saveCurrentPageChoices() {
  // Save radio button choices
  $('input[type="radio"]:checked').each(function() {
    let name = $(this).attr('name');
    let qId = name.replace('q', '');
    evaluationChoices[qId] = $(this).val();
  });
  
  // Save remarks
  $('input[type="text"]').each(function() {
    let qId = $(this).data('qid');
    evaluationRemarks[qId] = $(this).val();
  });
}

function restorePageChoices() {
  // Restore radio button choices
  for (let qId in evaluationChoices) {
    let choice = evaluationChoices[qId];
    $('input[name="q' + qId + '"][value="' + choice + '"]').prop('checked', true);
  }
  
  // Restore remarks
  for (let qId in evaluationRemarks) {
    $('input[data-qid="' + qId + '"]').val(evaluationRemarks[qId]);
  }
}

function createQuestionCard(q, selected, idx) {
  let html = "<div class='bg-white rounded shadow p-4 mb-4'>";
  
  html += "<div class='flex justify-between items-start mb-3'>";
  html += "<h3 class='font-semibold text-gray-800 text-lg'>";
  html += (idx + 1) + ". " + q.question;
  html += "</h3>";
  html += "<span class='text-sm bg-blue-100 text-blue-700 px-3 py-1 rounded-full font-semibold'>";
  html += q.marks + " marks";
  html += "</span>";
  html += "</div>";
  
  html += "<div class='grid grid-cols-2 gap-2 mb-3 text-sm'>";
  html += "<div class='p-2 border rounded bg-gray-50'><b>A:</b> " + q.optionA + "</div>";
  html += "<div class='p-2 border rounded bg-gray-50'><b>B:</b> " + q.optionB + "</div>";
  html += "<div class='p-2 border rounded bg-gray-50'><b>C:</b> " + q.optionC + "</div>";
  html += "<div class='p-2 border rounded bg-gray-50'><b>D:</b> " + q.optionD + "</div>";
  html += "</div>";
  
  html += "<div class='grid grid-cols-2 gap-4 mb-3 p-3 bg-gray-50 rounded'>";
  html += "<div>";
  html += "<span class='text-sm text-gray-600 font-medium'>Candidate:</span>";
  html += "<div class='text-base font-bold text-blue-600'>" + selected + "</div>";
  html += "</div>";
  html += "<div>";
  html += "<span class='text-sm text-gray-600 font-medium'>Correct:</span>";
  html += "<div class='text-base font-bold text-green-600'>" + q.correctAnswer + "</div>";
  html += "</div>";
  html += "</div>";
  
  html += "<div class='flex gap-4 items-center mb-3'>";
  html += "<label class='flex items-center gap-2 cursor-pointer px-4 py-2 border-2 rounded transition hover:bg-green-50'>";
  html += "<input type='radio' name='q" + q.questionId + "' value='correct' data-marks='" + q.marks + "' class='w-4 h-4'>";
  html += "<span class='text-green-600 font-semibold'>✓ Correct</span>";
  html += "</label>";
  
  html += "<label class='flex items-center gap-2 cursor-pointer px-4 py-2 border-2 rounded transition hover:bg-red-50'>";
  html += "<input type='radio' name='q" + q.questionId + "' value='wrong' data-marks='0' class='w-4 h-4'>";
  html += "<span class='text-red-600 font-semibold'>✗ Wrong</span>";
  html += "</label>";
  html += "</div>";
  
  html += "<input type='text' data-qid='" + q.questionId + "' ";
  html += "placeholder='Add remark (optional)' ";
  html += "class='w-full border rounded px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-400' />";
  
  html += "</div>";
  return html;
}

function updateTotalMarks() {
  saveCurrentPageChoices();
  
  let total = 0;
  
  for (let i = 0; i < allQuestions.length; i++) {
    let q = allQuestions[i];
    let choice = evaluationChoices[q.questionId];
    
    if (choice == 'correct') {
      total += q.marks;
    }
  }
  
  $("#calculatedMarks").text(total);
}

function setupPagination() {
  let totalPages = Math.ceil(allQuestions.length / questionsPerPage);
  
  let html = "<div class='flex justify-between items-center'>";
  
  html += "<button id='prevPage' class='px-4 py-2 rounded transition ";
  if (currentPage == 1) {
    html += "bg-gray-200 text-gray-400 cursor-not-allowed' disabled";
  } else {
    html += "bg-gray-600 hover:bg-gray-700 text-white'";
  }
  html += ">← Previous</button>";
  
  html += "<span class='text-gray-600 font-medium'>";
  html += "Page " + currentPage + " of " + totalPages;
  html += "</span>";
  
  html += "<button id='nextPage' class='px-4 py-2 rounded transition ";
  if (currentPage == totalPages) {
    html += "bg-gray-200 text-gray-400 cursor-not-allowed' disabled";
  } else {
    html += "bg-blue-600 hover:bg-blue-700 text-white'";
  }
  html += ">Next →</button>";
  
  html += "</div>";
  
  $("#paginationControls").html(html);
  
  $("#prevPage").on("click", function() {
    if (currentPage > 1) {
      currentPage--;
      renderPage();
      setupPagination();
      window.scrollTo(0, 0);
    }
  });
  
  $("#nextPage").on("click", function() {
    let totalPages = Math.ceil(allQuestions.length / questionsPerPage);
    if (currentPage < totalPages) {
      currentPage++;
      renderPage();
      setupPagination();
      window.scrollTo(0, 0);
    }
  });
}

function submitEvaluation() {
  // Save current page before submitting
  saveCurrentPageChoices();
  
  let panelRemarks = $("#panelRemarks").val();
  let evaluated = [];
  let totalMarksGained = 0;
  
  for (let i = 0; i < allQuestions.length; i++) {
    let q = allQuestions[i];
    let result = evaluationChoices[q.questionId];
    let remark = evaluationRemarks[q.questionId] || "";
    let isCorrect = result == "correct";
    let marksGained = isCorrect ? q.marks : 0;
    
    totalMarksGained += marksGained;
    
    let selectedAns = "";
    for (let j = 0; j < candidateAnswers.length; j++) {
      if (candidateAnswers[j].questionId == q.questionId) {
        selectedAns = candidateAnswers[j].selectedAnswer;
        break;
      }
    }
    
    evaluated.push({
      questionId: q.questionId,
      selectedAnswer: selectedAns,
      correctAnswer: q.correctAnswer,
      isCorrect: isCorrect,
      remark: remark,
      marksGained: marksGained,
    });
  }
  
  let payload = {
    candidate_assessment_id: candidateAssessmentId,
    evaluation: JSON.stringify(evaluated),
    panelRemarks: panelRemarks,
  };
  
  Swal.fire({
    title: 'Submit Evaluation?',
    text: 'Total Marks: ' + totalMarksGained,
    icon: 'question',
    showCancelButton: true,
    confirmButtonColor: '#2563eb',
    cancelButtonColor: '#6b7280',
    confirmButtonText: 'Yes, Submit'
  }).then(function(result) {
    if (result.isConfirmed) {
      ajaxPost("submitManualEvaluation", payload, function(r) {
        if (r.status == "success") {
          Swal.fire({
            title: 'Success!',
            text: 'Evaluation saved successfully!',
            icon: 'success',
            confirmButtonColor: '#2563eb'
          }).then(function() {
            window.location.href = "panelDashboard.html";
          });
        } else {
          notyf.error(r.message || "Error saving evaluation");
        }
      });
    }
  });
}<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Evaluate Answers</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.css">
  <script src="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-50 min-h-screen">

  <!-- Header -->
  <header class="bg-black text-white shadow-lg fixed top-0 left-0 w-full z-50">
    <div class="container mx-auto flex justify-between items-center px-6 py-3">
      <div class="flex items-center space-x-2">
        <span class="material-icons text-blue-500 text-3xl">grading</span>
        <h1 class="text-2xl font-bold">Evaluate Answers</h1>
      </div>
      <button id="backBtn" class="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700">
        ← Back to Dashboard
      </button>
    </div>
  </header>

  <!-- Main Content -->
  <main class="container mx-auto px-6 py-24">
    <div class="max-w-4xl mx-auto">
     
      <!-- Assessment Info Card -->
      <div class="bg-white rounded-lg shadow-md p-6 mb-6">
        <h2 id="assessmentTitle" class="text-2xl font-bold text-gray-800 mb-2">Loading...</h2>
        <div id="totalMarksDisplay" class="bg-gradient-to-r from-blue-50 to-indigo-50 border-l-4 border-blue-500 rounded p-3 flex justify-between items-center">
          <span class="font-semibold text-gray-700">Total Marks:</span>
          <span id="calculatedMarks" class="text-blue-700 font-bold text-2xl">0</span>
        </div>
      </div>

      <!-- Questions Container -->
      <div id="questionsContainer" class="space-y-4"></div>

      <!-- Pagination -->
      <div id="paginationControls" class="bg-white rounded-lg shadow-md p-4 mt-6"></div>

      <!-- Panel Remarks & Submit -->
      <div class="bg-white rounded-lg shadow-md p-6 mt-6">
        <label class="block mb-2 text-gray-700 font-semibold">Panel Remarks:</label>
        <textarea id="panelRemarks"
          class="w-full border rounded p-3 focus:outline-none focus:ring-2 focus:ring-blue-400"
          rows="4"
          placeholder="Add your overall feedback here..."></textarea>
       
        <div class="flex justify-end mt-4 gap-3">
          <button id="cancelBtn" class="bg-gray-400 text-white px-6 py-3 rounded hover:bg-gray-500 transition">
            Cancel
          </button>
          <button id="submitEvaluation" class="bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 transition">
            Submit Evaluation
          </button>
        </div>
      </div>

    </div>
  </main>

  <script src="utils.js"></script>
  <script src="evaluation.js"></script>
</body>
</html>
